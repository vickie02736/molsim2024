language: cpp
matrix:
  include:
# list of configurations to be attempted:
# MPI + doc
# this is the "master" one, it is going to update the manual if log contains [makedoc]
# Variable PLUMED_ALL_TESTS=yes ensures that all the regtests can be run.
# If some of them is not enabled, the whole suite will fail.
  - os: linux
    dist: trusty
    sudo: required
    env: PLUMED_CC=mpicc PLUMED_CXX=mpic++ MAKEDOC=yes PLUMED_ALL_TESTS=yes
# the following are with debug flags
  - os: linux
    dist: trusty
    sudo: required
    env: PLUMED_CC=gcc   PLUMED_CXX=g++    CONFIG_FLAGS="--enable-debug --enable-debug-glibcxx"
  - os: linux
    dist: trusty
    sudo: required
    env: PLUMED_CC=mpicc PLUMED_CXX=mpic++ CONFIG_FLAGS="--enable-debug --enable-debug-glibcxx"
# cppcheck - takes a lot of time to compile the code, so I place it closer
# to the beginning of the list
  - os: linux
    dist: trusty
    sudo: required
    env: CPPCHECK=yes CPPCHECK_VERSION=1.75
# then check with different optimization flags
  - os: linux
    dist: trusty
    sudo: required
    env: PLUMED_CC=gcc   PLUMED_CXX=g++     PLUMED_CXXFLAGS=-O3 LAPACK=yes
# then I try serial compiler on UBUNTU precise
  - os: linux
    dist: precise
    sudo: required
    env: PLUMED_CC=gcc   PLUMED_CXX=g++
# test using external blas with internal lapack
  - os: linux
    dist: trusty
    sudo: required
    env: PLUMED_CC=mpicc PLUMED_CXX=mpic++  PLUMED_CXXFLAGS=-O3 LAPACK=yes CONFIG_FLAGS="--disable-external-lapack"
# osx serial
  - os: osx
    osx_image: xcode7.3
    env: PLUMED_CC=clang PLUMED_CXX=clang++ PLUMED_CXXFLAGS=-O3
# osx parallel
  - os: osx
    osx_image: xcode7.3
    env: PLUMED_CC=mpicc PLUMED_CXX=mpic++  PLUMED_CXXFLAGS=-O3
# osx serial macports
  - os: osx
    osx_image: xcode7.3
    env: PLUMED_MACPORTS="plumed"
# osx serial macports debug variant
  - os: osx
    osx_image: xcode7.3
    env: PLUMED_MACPORTS="plumed +crystallization +manyrestraints +adjmat"
# I don't put any mpi variant with macports since it takes too long to compile
## This command can be used to allow failures:
##  allow_failures:
## # I allow this to fail temporarily
##    - env: CPPCHECK=yes CPPCHECK_VERSION=1.74
## Possible additional variables:
#   VALGRIND=yes to make valgrind tests, only when log contains string [valgrind]
install:
# setup environment to allow install on the home directory
  - export PATH="$HOME/opt/bin:$PATH"
  - export CPATH="$HOME/opt/include:$CPATH"
  - export INCLUDE="$HOME/opt/include:$INCLUDE"
  - export LIBRARY_PATH="$HOME/opt/lib:$LIBRARY_PATH"
  - export LD_LIBRARY_PATH="$HOME/opt/lib:$LD_LIBRARY_PATH"
# build the manual, only if log contains string [makedoc]
  - export PLUMED_NUM_THREADS=2
# accept both [makedoc] and [makedocs] as an option
  - ./.travis/check.log makedoc  || ./.travis/check.log makedocs || MAKEDOC=no
  - ./.travis/check.log valgrind || VALGRIND=no
# update packages
  - if [[ "$TRAVIS_OS_NAME" == "osx" ]] && test -z "$PLUMED_MACPORTS" ; then brew update > /dev/null ; fi
  - if [[ "$TRAVIS_OS_NAME" == "linux" ]]; then sudo apt-get update -qq ; fi
# install some package - these are fast, we install them anyway
  - if [[ "$TRAVIS_OS_NAME" == "linux" ]]; then sudo apt-get install -y libmatheval-dev libfftw3-dev gsl-bin libgsl0-dev ; fi
  - if test "$PLUMED_CXX" ; then ./.travis/install.xdrfile ; fi
# cppcheck:
# I use 1.71 since 1.72 seems to report a lot of false positive
  - if test "$CPPCHECK" == yes ; then  ./.travis/install.cppcheck $CPPCHECK_VERSION ; fi
# for plumedcheck I need latest gawk
  - if test "$CPPCHECK" == yes ; then  ./.travis/install.gawk ; fi
# installation of these packages takes a lot of time
# we do it only when needed
  - if test "$PLUMED_CXX" == "mpic++" -a "$TRAVIS_OS_NAME" == "linux" ; then sudo apt-get install -y libopenmpi-dev openmpi-bin ; fi
  - if test "$PLUMED_CXX" == "mpic++" -a "$TRAVIS_OS_NAME" == "osx" ;   then brew install openmpi ; fi
  - if test "$MAKEDOC" == yes ; then sudo apt-get install -y graphviz            ; fi
# install doxygen-latex
  - if test "$MAKEDOC" == yes ; then sudo apt-get install -y doxygen-latex ; fi
# install lcov
  - if test "$MAKEDOC" == yes ; then sudo apt-get install -y lcov ; fi
# then replace doxygen with the desided version
# I use 1.8.10 instead of 1.8.11 since it looks like 1.8.11 have troubles with
# non case sensitive files (it writes capitalized filenames)
  - if test "$MAKEDOC" == yes ; then ./.travis/install.doxygen Release_1_8_12 ; fi
  - if test "$VALGRIND" == yes ; then sudo apt-get install -y valgrind           ; fi
  - if test "$LAPACK" == yes ; then sudo apt-get -y install libatlas-base-dev      ; fi
# moreover, we hardcode path to dynamic library, required for xdrfile to link properly
# I do it only when LD_LIBRARY_PATH is non blank, since otherwise clang gives problems
  - if test -n "$LD_LIBRARY_PATH" ; then PLUMED_LDFLAGS="-Wl,-rpath,$LD_LIBRARY_PATH" ; fi
# macports related stuff
  - if test -n "$PLUMED_MACPORTS" ; then export COLUMNS=80 ; fi
# install macports from source:
#  - if test -n "$PLUMED_MACPORTS" ; then wget https://distfiles.macports.org/MacPorts/MacPorts-2.3.4.tar.bz2 && tar xvfj MacPorts-2.3.4.tar.bz2 ; fi
#  - if test -n "$PLUMED_MACPORTS" ; then cd MacPorts-2.3.4 && ./configure && sudo make install && cd - && sudo rm -fr MacPorts-2.3.4 ; fi
# install macports from binary (faster):
  - if test -n "$PLUMED_MACPORTS" ; then wget https://distfiles.macports.org/MacPorts/MacPorts-2.3.4-10.11-ElCapitan.pkg ; fi
  - if test -n "$PLUMED_MACPORTS" ; then sudo installer -pkg MacPorts-2.3.4-10.11-ElCapitan.pkg -target / ; fi
  - if test -n "$PLUMED_MACPORTS" ; then export PATH=/opt/local/bin:$PATH ; fi
  - if test -n "$PLUMED_MACPORTS" ; then sudo port -v selfupdate ; fi
  - if test -n "$PLUMED_MACPORTS" ; then make macports ; fi
  - if test -n "$PLUMED_MACPORTS" ; then ./.travis/config.macports.sh ; fi

script:
# make sure all modules are enabled
  - CONFIG_FLAGS="$CONFIG_FLAGS --enable-modules=all"
# we enable fftw, which is off by default
  - CONFIG_FLAGS="$CONFIG_FLAGS --enable-fftw"
  - if test "$MAKEDOC" == yes ; then CONFIG_FLAGS="$CONFIG_FLAGS --enable-pdfdoc" ; fi
  - if test "$MAKEDOC" == yes ; then CONFIG_FLAGS="$CONFIG_FLAGS --enable-gcov" ; fi
# when running lcov plumed should be compiled with -O0
  - if test "$MAKEDOC" == yes ; then PLUMED_CXXFLAGS=-O0 ; fi

# BUILD:
# this is done only if PLUMED_CXX is defined
# we have to pass the full path since on travis machines sudo does not have compilers in the path
  - if test "$PLUMED_CXX" ; then ./configure CXX=$(which $PLUMED_CXX) CC=$(which $PLUMED_CC) CXXFLAGS="$PLUMED_CXXFLAGS" LDFLAGS="$PLUMED_LDFLAGS" CPPFLAGS="$PLUMED_CPPFLAGS" $CONFIG_FLAGS ; fi
  - if test "$PLUMED_CXX" ; then make -j 4 ; fi
# we install plumed so that it is in the path
  - if test "$PLUMED_CXX" ; then make install prefix="$HOME/opt" ; fi

# build using macports
# this is required for some misterious reason:
  - if test -n "$PLUMED_MACPORTS" ; then sudo port install flex +universal ; fi
  - if test -n "$PLUMED_MACPORTS" ; then sudo port install $PLUMED_MACPORTS ; fi

# TEST:
  - if test "$VALGRIND" == yes ; then OPT=valgrind ; else OPT="" ; fi
  - if test "$PLUMED_CXX" || test -n "$PLUMED_MACPORTS" ; then make -C regtest $OPT ; fi
  - if test "$MAKEDOC" == yes ; then make -C regtest copytodoc ; fi
  - if test "$MAKEDOC" == yes ; then make -C developer-doc coverage ; fi
  - if test "$MAKEDOC" == yes ; then make doc >/dev/null ; fi
  - if test "$PLUMED_CXX" || test -n "$PLUMED_MACPORTS" ; then make -C regtest checkfail ; fi

# CPPCHECK:
# this is required so as to have all the include files inplace:
# notice that this is done automatically in build
  - if test "$CPPCHECK" == yes ; then make -C src/lib/ dirslinks ; fi
# then we do cppcheck
# notice that with make codecheck we also run the maketools/plumedcheck
# script which check if coding policies are satisfied
  - if test "$CPPCHECK" == yes ; then make codecheck ; fi
after_success:
  - if test "$MAKEDOC" == yes ; then ./.travis/pushdoc ; fi 
